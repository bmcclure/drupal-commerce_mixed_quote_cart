<?php

use Drupal\commerce\PurchasableEntityInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\commerce_quote_cart\QuoteCartHelper;
use Drupal\commerce_product\Entity\ProductInterface;
use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Form\FormStateInterface;

/**
 * @param array $storage
 * @return \Drupal\commerce_product\Entity\ProductVariationInterface|\Drupal\Core\Entity\EntityInterface|null
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 */
function commerce_quote_cart_get_current_variation(array $storage) {
  if (isset($storage['selected_variation'])) {
    $variationId = $storage['selected_variation'];

    /** @var \Drupal\Core\Entity\ContentEntityInterface $variation */
    return \Drupal::entityTypeManager()->getStorage('commerce_product_variation')->load($variationId);
  }

  /** @var ProductInterface $product */
  $product = $storage['product'];

  return $product->getDefaultVariation();
}

/**
 * @param PurchasableEntityInterface $entity
 * @return \Drupal\commerce_store\Entity\StoreInterface|mixed
 * @throws Exception
 */
function commerce_quote_cart_get_store(PurchasableEntityInterface $entity) {
  $stores = $entity->getStores();
  if (count($stores) === 1) {
    $store = reset($stores);
  }
  else {
    $store = \Drupal::service('commerce_store.store_context')->getStore();
    if (!in_array($store, $stores, FALSE)) {
      // Indicates that the site listings are not filtered properly.
      throw new \Exception("The given entity can't be purchased from the current store.");
    }
  }

  return $store;
}

/**
 * @param array $form
 * @param FormStateInterface $form_state
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function commerce_quote_cart_submit_convert(array &$form, FormStateInterface $form_state) {
  /** @var \Drupal\views\ViewExecutable $view */
  $view = $form_state->getBuildInfo()['args'][0];

  foreach ($view->result as $resultRow) {
    if (!isset($resultRow->_entity)) {
      continue;
    }

    /** @var \Drupal\commerce_order\Entity\OrderInterface $order */
    $order = $resultRow->_entity;

    QuoteCartHelper::convertToQuote($order);
  }
}

function commerce_quote_cart_submit_quote(array &$form, FormStateInterface $form_state) {
  /** @var \Drupal\commerce_cart\Form\AddToCartForm $addToCartForm */
  $addToCartForm = $form_state->getBuildInfo()['callback_object'];

  /** @var \Drupal\commerce_order\Entity\OrderItemInterface $order_item */
  $order_item = $addToCartForm->getEntity();
  $order_item->set('quote', ['value' => "1"]);

  $addToCartForm->submitForm($form, $form_state);
}

/**
 * Implements hook_preprocess_block().
 */
function commerce_quote_cart_preprocess_block(&$variables) {
  if (isset($variables['elements']['#id']) && in_array($variables['elements']['#id'], ['product_variations', 'product_variations_mobile'])) {
    $variables['label'] = commerce_quote_cart_block_label($variables);
  }

  if ($variables['plugin_id'] === 'page_title_block' && \Drupal::routeMatch()->getRouteName() === 'entity.commerce_order.user_view') {
    /** @var \Drupal\commerce_order\Entity\OrderInterface $order */
    $order = \Drupal::routeMatch()->getParameter('commerce_order');

    if ($order) {
      $title = QuoteCartHelper::isPurchaseCart($order) ? 'Order' : 'Quote';
      $variables['content']['#title'] = t($title . ' number: @order_number', ['@order_number' => $order->getOrderNumber()]);
    }
  }
}

/**
 * Implements hook_preprocess_commerce_order().
 */
function commerce_quote_cart_preprocess_commerce_order(&$variables) {
  commerce_quote_cart_populate_order_variables($variables);
}

/**
 * Implements hook_preprocess_commerce_order_receipt().
 */
function commerce_quote_cart_preprocess_commerce_order_receipt(&$variables) {
  commerce_quote_cart_populate_order_variables($variables);
}

/**
 * Implements hook_preprocess_commerce_checkout_completion_message().
 */
function commerce_quote_cart_preprocess_commerce_checkout_completion_message(&$variables) {
  commerce_quote_cart_populate_order_variables($variables);
}

function commerce_quote_cart_populate_order_variables(&$variables) {
  if (isset($variables['order_entity'])) {
    /** @var Drupal\commerce_order\Entity\OrderInterface $order */
    $order = $variables['order_entity'];

    $variables['order_label'] = \Drupal\commerce_quote_cart\QuoteCartHelper::isPurchaseCart($order) ? t('Order') : t('Quote');
    $variables['is_quote'] = !\Drupal\commerce_quote_cart\QuoteCartHelper::isPurchaseCart($order);

    if (isset($variables['order']['order_number']) && $variables['is_quote']) {
      $variables['order']['order_number']['#title'] = t('Quote number');
    }
  }
}

function commerce_quote_cart_block_label($variables) {
  $label = $variables['label'];

  $product = $variables['content']['content']['#commerce_product'];

  if ($product instanceof \Drupal\commerce_product\Entity\ProductInterface) {
    if (commerce_quote_cart_product_is_purchasable($product)) {
      $label = 'Add to Cart';
    }
  }

  return $label;
}

function commerce_quote_cart_product_is_purchasable(ProductInterface $product) {
  $purchasableField = 'available_for_purchase';
  $variations = $product->getVariations();

  $purchasable = FALSE;

  foreach ($variations as $variation) {
    if (!$variation->hasField($purchasableField) || $variation->get($purchasableField)->value) {
      $purchasable = TRUE;

      break;
    }
  }

  return $purchasable;
}

function commerce_quote_cart_preprocess_field(&$variables) {
  if ($variables['element']['#field_name'] === 'price') {
    /** @var FieldableEntityInterface $entity */
    $entity = $variables['element']['#object'];

    $purchasable = 'available_for_purchase';
    $quotable = 'available_for_quote';

    if ($entity->hasField($purchasable) && !$entity->get($purchasable)->value) {
      if (isset($variables['items'][0])) {
        if ($entity->hasField($quotable) && $entity->get($quotable)->value) {
          $variables['items'][0]['content']['#markup'] = t('Quote');
        } else {
          $variables['items'][0]['content']['#markup'] = '';
        }

      }
    }
  }
}

/**
 * @param array $entities
 * @param $entity_type
 * @throws \Drupal\Core\TypedData\Exception\MissingDataException
 */
function commerce_quote_cart_entity_storage_load(array $entities, $entity_type) {
  if ($entity_type === 'commerce_order') {
    /** @var \Drupal\commerce_order\Entity\OrderInterface $order */
    foreach ($entities as $order) {
      $targetId = QuoteCartHelper::isPurchaseCart($order) ? 'default' : 'quote';
      $order->get('checkout_flow')->set(0, ['target_id' => $targetId]);
    }
  }
}

/**
 * Implements hook_commerce_shipping_methods_alter().
 */
function commerce_quote_cart_commerce_shipping_methods_alter(array &$shipping_methods, \Drupal\commerce_shipping\Entity\ShipmentInterface $shipment) {
  $shipping_methods = QuoteCartHelper::filterShippingMethods($shipping_methods, $shipment);
}

function commerce_quote_cart_set_triggering_element(array $form, \Drupal\Core\Form\FormStateInterface $form_state) {
  $input = $form_state->getUserInput();

  foreach (['submit', 'quote'] as $button) {
    if (isset($input[$button])) {
      $form_state->setTriggeringElement($form['actions'][$button]);
      break;
    }
  }

  return $form;
}

/**
 * Implements hook_commerce_google_analytics_item_alter().
 *
 * If order total is 0 empty the array.
 * Do not send analytics for orders that are $0 (e.g. quotes).
 */
function commerce_quote_cart_commerce_google_analytics_item_alter(array &$item, \Drupal\commerce_order\Entity\OrderItemInterface $order_item, array $context) {
  if (0 == $item['price']) {
    $item = [];
  }
}

/**
 * Implements hook_ga_push_add_alter().
 *
 * If transaction and items arrays are empty set params to null.
 * Do not send analytics for orders that are $0 (e.g. quotes).
 */
function commerce_quote_cart_ga_push_add_alter(&$push_params, $type = GA_PUSH_TYPE_EVENT, $method_key = NULL, $options = array()) {
  if (empty($push_params['params']['trans']) && empty($push_params['params']['items'])) {
    $push_params['params'] = NULL;
  }
}

/**
 * Implements hook_entity_base_field_info().
 *
 * Provides base fields for quote, purchase.
 */
function commerce_quote_cart_entity_base_field_info(EntityTypeInterface $entity_type) {
  // Add base fields to commerce_order.
  if ($entity_type->id() === 'commerce_order') {
    $fields['quote'] = BaseFieldDefinition::create('boolean')
      ->setLabel(t('Quote'))
      ->setDisplayConfigurable('form', TRUE)
      ->setDisplayOptions('form', [
        'type' => 'boolean_checkbox',
        'settings' => [
          'display_label' => TRUE,
        ]
      ])
      ->setDisplayConfigurable('view', TRUE);
    $fields['purchase'] = BaseFieldDefinition::create('boolean')
      ->setLabel(t('Purchase'))
      ->setDisplayConfigurable('form', TRUE)
      ->setDisplayOptions('form', [
        'type' => 'boolean_checkbox',
        'settings' => [
          'display_label' => TRUE,
        ]
      ])
      ->setDisplayConfigurable('view', TRUE);
    return $fields;
  }
  // Add base field to commerce_order_item.
  if ($entity_type->id() === 'commerce_order_item') {
    $fields['quote'] = BaseFieldDefinition::create('boolean')
      ->setLabel(t('Quote'))
      ->setDisplayConfigurable('form', TRUE)
      ->setDisplayOptions('form', [
        'type' => 'boolean_checkbox',
        'settings' => [
          'display_label' => TRUE,
        ]
      ])
      ->setDisplayConfigurable('view', TRUE);
    return $fields;
  }
  // Add base fields to commerce_product_variation.
  if ($entity_type->id() === 'commerce_product_variation') {
    $fields['available_for_purchase'] = BaseFieldDefinition::create('boolean')
      ->setLabel(t('Available for Purchase'))
      ->setDisplayConfigurable('form', TRUE)
      ->setDisplayOptions('form', [
        'type' => 'boolean_checkbox',
        'settings' => [
          'display_label' => TRUE,
        ]
      ])
      ->setDisplayConfigurable('view', TRUE);
    $fields['available_for_quote'] = BaseFieldDefinition::create('boolean')
      ->setLabel(t('Available for Quote'))
      ->setDisplayConfigurable('form', TRUE)
      ->setDisplayOptions('form', [
        'type' => 'boolean_checkbox',
        'settings' => [
          'display_label' => TRUE,
        ]
      ])
      ->setDisplayConfigurable('view', TRUE);
    return $fields;
  }
}
